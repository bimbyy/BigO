Simplify-

1. O(n + 10)
	O(n)
2. O(100 * n)
	O(n)
3. O(25)
	O(1)
4. O(n^2 + n^3)
	O(n^3)
5. O(n + n + n + n)
	O(n)
6. O(1000 * log(n) + n)
	O(n)?
7. O(1000 * n * log(n) + n)
	O(n Log n)
8. O(2^n + n^2)
	O(2^n)
9. O(5 + 3 + 1)
	O(1)
10. O(n + n^(1/2) + n^2 + n * log(n)^10)
	O(n^2)
	-------------------------- Step Two---------------------------
function logUpTo(n) {
  for (let i = 1; i <= n; i++) {
    console.log(i);
  }
}
		Time Complexity is O(n)

function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) {
    console.log(i);
  }
}

		Time Complexity is O(n)

function logAtMost10(n) {
  for (let i = 1; i <= Math.min(n, 10); i++) {
    console.log(i);
  }
}
		Time Complexity is O(n)
		
function onlyElementsAtEvenIndex(array) {
  let newArray = [];
  for (let i = 0; i < array.length; i++) {
    if (i % 2 === 0) {
      newArray.push(array[i]);
    }
  }
  return newArray;
}
		Time Complexity is O(n)
		
function subtotals(array) {
  let subtotalArray = []; <- This is linear so O(1)
  for (let i = 0; i < array.length; i++) { <- Basic Loop is O(n)
    let subtotal = 0;
    for (let j = 0; j <= i; j++) { <- Another Basic Loop is O(n)
      subtotal += array[j]; 
    }
    subtotalArray.push(subtotal); <- Linear O(1)
  }
  return subtotalArray;
}

If you add them together you just get O(n^2) Since we drop the O(1)'s

function vowelCount(str) {
  let vowelCount = {};
  const vowels = "aeiouAEIOU";

  for (let char of str) {
    if(vowels.includes(char)) {
      if(char in vowelCount) {
        vowelCount[char] += 1;
      } else {
        vowelCount[char] = 1;
      }
    }
  }

  return vowelCount;
}

This one I am not 100% on but due to the whole thing just being a linear loop of up to 10 I think its O(n)

----------------------Part 3-----------------------------
1. True or false: n^2 + n is O(n^2). 
	True, This is just common algebra
2. True or false: n^2 * n is O(n^3). 
	True, Same as above timsing another n into n^2 would be n^3
3. True or false: n^2 + n is O(n). 
	False, Pretty sure you cant remove a n through addition :D
4. What’s the time complexity of the .indexOf array method?
	O(n)
5. What’s the time complexity of the .includes array method?
	O(n)
6. What’s the time complexity of the .forEach array method?
	O(n)
7. What’s the time complexity of the .sort array method?
	Had to google this one to understand it but its O(n log n)
8. What’s the time complexity of the .unshift array method?
	O(n) 
9. What’s the time complexity of the .push array method?
	O(1) since its just a single push
10. What’s the time complexity of the .splice array method?
	Pretty sure its O(n)
11. What’s the time complexity of the .pop array method?
	O(1) since its a single pop or action
12. What’s the time complexity of the Object.keys() function?
	O(n)
13. What’s the space complexity of the Object.keys() function?
	O(n)

My thinking for all of these common commands is that its O(however many actions or calls it requires) thus making it O(n) since the number can varry based on whats being passed through.